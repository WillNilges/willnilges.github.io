<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-02-01T19:25:04-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Will’s Guide to Computing for Forgetful Power Users</title><subtitle>A place to dump guides, tidbits of computing knowlegde, event notifications, or whatever the hell else I feel like dumping.</subtitle><entry><title type="html">A small update</title><link href="http://localhost:4000/blog/2020/01/13/new_year.html" rel="alternate" type="text/html" title="A small update" /><published>2020-01-13T16:08:23-05:00</published><updated>2020-01-13T16:08:23-05:00</updated><id>http://localhost:4000/blog/2020/01/13/new_year</id><content type="html" xml:base="http://localhost:4000/blog/2020/01/13/new_year.html">&lt;p&gt;Hello, and happy new year!&lt;/p&gt;

&lt;p&gt;New year, new semester. I wanted to make a small blog post to get things rolling and announce two things that I’m doing/have done.&lt;/p&gt;

&lt;p&gt;For the last 6(?) months, I’ve been working on a thing called &lt;a href=&quot;https://www.github.com/willnilges/shelflife&quot;&gt;ShelfLife&lt;/a&gt;, a OpenShift application that manages cluster resources by tracking project usage and automatically diverting resources away from stale pods and unused projects, eventually archiving them and deleting them off the cluster. The MVP for this app is done, and as soon as I figure out some API key nonsense, I’ll have that up and running in a VM. Next steps with that are to create a web dashboard where people can retrieve their archived projects and restore them to the cluster, so that RTPs don’t have to do it. After that, I want to containerize the application and add some more features so that it can run directly on the cluster instead of in a VM and be even more useful. After that’s done, I’d like to write a second version in Go, and commit it directly, as a cluster feature, to the OpenShift repository on github.&lt;/p&gt;

&lt;p&gt;So that’s the plan on that.&lt;/p&gt;

&lt;p&gt;As for the second thing, I’ve undertaken an independent study this semester, working with these neat machines called OLPCs. Might’ve heard of these about 12 years back when they got deployed to developing countries to help kiddos learn. The full name of the project is the One Laptop Per Child project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/b1/LaptopOLPC_a.jpg&quot; alt=&quot;olpc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s been a passing interest of mine for a while, and the issue with them is that they’re old. They don’t run modern Linux, and I would like them to. So I’ll be blogging about that in the coming months.&lt;/p&gt;

&lt;p&gt;Stay tuned, and follow Willard in his adventures to survive yet &lt;em&gt;another&lt;/em&gt; semester of engineering school.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello, and happy new year!</summary></entry><entry><title type="html">How to install Bumblebee on Arch</title><link href="http://localhost:4000/poweruser/guide/2019/10/29/bumblebee_on_arch.html" rel="alternate" type="text/html" title="How to install Bumblebee on Arch" /><published>2019-10-29T12:33:33-04:00</published><updated>2019-10-29T12:33:33-04:00</updated><id>http://localhost:4000/poweruser/guide/2019/10/29/bumblebee_on_arch</id><content type="html" xml:base="http://localhost:4000/poweruser/guide/2019/10/29/bumblebee_on_arch.html">&lt;p&gt;Do this after installing Xorg but before installing a DE. The next time I install Arch I’ll actually blog about it properly but this is something that might be useful real quick. Also, if you’re trying to install Bumblebee on any other flavor,&lt;/p&gt;

&lt;p&gt;don’t.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pacman -S bumblebee mesa xf86-video-intel lib32-virtualgl lib32-nvidia-utils
sudo gpasswd -a $USER bumblebee
sudo systemctl enable bumblebee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Do this after installing Xorg but before installing a DE. The next time I install Arch I’ll actually blog about it properly but this is something that might be useful real quick. Also, if you’re trying to install Bumblebee on any other flavor,</summary></entry><entry><title type="html">The Future is Open reigstration happening now!</title><link href="http://localhost:4000/blog/2019/10/02/future_is_open.html" rel="alternate" type="text/html" title="The Future is Open reigstration happening now!" /><published>2019-10-02T16:32:23-04:00</published><updated>2019-10-02T16:32:23-04:00</updated><id>http://localhost:4000/blog/2019/10/02/future_is_open</id><content type="html" xml:base="http://localhost:4000/blog/2019/10/02/future_is_open.html">&lt;p&gt;Heyoooooooooooooooooooooooooooooooooo!&lt;/p&gt;

&lt;p&gt;The Future is Open is now open for registration! It’s a FOSS conference happening at the RIT MAGIC center to promote Free and Open Source Software (FOSS) with a slew of cool events and workshops. Come on down at 10am on Saturday, October 26 and get FOSSy with it.&lt;/p&gt;

&lt;p&gt;Why do I bring this up? Because I’m running an event! I will be giving a workshop from 12-4 detailing how to get Linux booted on &lt;em&gt;your&lt;/em&gt; machine! If you’re curious about Linux, but have no idea where to start, attend this workshop!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Linux is an OS that champions freedom, protects privacy, encourages community, and is customizable to the core. However, many people can’t enjoy these (and many other) benefits because they don’t know where to start.
This workshop is designed to make it easy to get Linux up and running on your machine.&lt;/p&gt;

&lt;p&gt;In this workshop, we will cover the fundamentals of Ubuntu, Fedora, the GNOME desktop environment, and the Linux shell, as well as how to install Linux on your machine! Several flash drives will be provided, but it is recommended to bring your own. If you want to try Linux, learn the basics, and get it running on your machine, come on in!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://fossrit.community/t/get-free-tickets-to-the-future-is-open-2019-sat-26-oct-10am-5pm/126&quot;&gt;Learn More!&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Heyoooooooooooooooooooooooooooooooooo!</summary></entry><entry><title type="html">How to properly scale i3 on HiDPI displays</title><link href="http://localhost:4000/jekyll/update/2019/08/13/proper_i3_scaling.html" rel="alternate" type="text/html" title="How to properly scale i3 on HiDPI displays" /><published>2019-08-13T16:32:23-04:00</published><updated>2019-08-13T16:32:23-04:00</updated><id>http://localhost:4000/jekyll/update/2019/08/13/proper_i3_scaling</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/08/13/proper_i3_scaling.html">&lt;p&gt;So I nuked my laptop last week and re-installed Arch (no Windows in this house anymore). I need to post a lot of cool new things I learned, but here’s another scaling tip for everyone.&lt;/p&gt;

&lt;p&gt;The old way I was doing scaling was a little broken. I had a hodgepodge of scaling soltuons for each different app. This turned out to be a nightmare, surprising nobody.&lt;/p&gt;

&lt;p&gt;My new way is a simple .Xdefaults file, containting one (1) line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xft.dpi: 168&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s literally it. Now, all of my fonts are back to normal-ish values (Terminal font is now 12 instead of 30), Thunar no longer is impossible to see, Firefox scaling works as expected, and I expect that WINE applications and other apps with suboptimal application scaling (looking at you, FreeCAD) will be much easier to see.&lt;/p&gt;</content><author><name></name></author><summary type="html">So I nuked my laptop last week and re-installed Arch (no Windows in this house anymore). I need to post a lot of cool new things I learned, but here’s another scaling tip for everyone.</summary></entry><entry><title type="html">My (ongoing) embedded chip nightmare feat. FRDM and Arduino</title><link href="http://localhost:4000/jekyll/update/2019/07/18/embedded_nightmare.html" rel="alternate" type="text/html" title="My (ongoing) embedded chip nightmare feat. FRDM and Arduino" /><published>2019-07-18T16:32:23-04:00</published><updated>2019-07-18T16:32:23-04:00</updated><id>http://localhost:4000/jekyll/update/2019/07/18/embedded_nightmare</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/07/18/embedded_nightmare.html">&lt;p&gt;So, if you’ve read my aboutme page recently, you’ll know that I’m currently working on putting together a cool custom controller for a GDD project for Imagine RIT 2020. Basically, the controller is going to be totally custom and will have many buttons, knobs, switches, dials, and displays so that people can walk by our booth and press fancy buttons to make random stuff happen in our game. (It’s more of a control panel, really). Basically, the panel will have the ability to impact the game world by activating abilities, changing stuff like gravity, screen orientation, etc. I want to make this happen by basically engineering a custom chassis, stuffing a bunch of really neat-o looking buttons inside, and having some kind of controller emulate keypresses&lt;/p&gt;

&lt;p&gt;Only one problem, though: Embedded platforms are kind of a nightmare.&lt;/p&gt;

&lt;p&gt;I’m writing about this becuase I know some people I think’d get a kick out of this story, and I think it’s really going to be an example of just how goddamn annoying computers can be.&lt;/p&gt;

&lt;p&gt;Okay, so here’s the thing. I need a microcontroller board that can do all the things I needed it to do. I believe the best thing for this project would be an Arduino Leonardo, since it can do all the Arduino-y things, but can also be used as an HID device, meaning keyboard emulation. However, I didn’t want to use something I was familiar with (in persuit of knowledge™). My original thought was to use the Teensy 3.6 that CSH had. However, when I went to the research room a few weeks ago to look for it, I couldn’t find it for the life of me! So, I had to look for alternatives.&lt;/p&gt;

&lt;p&gt;I researched two of them: The Arduino has a project called HoodLoader2 that operated on the fact that Arduinos (I think all of them) actually have two microcontrollers on them. The Arduino Uno has a 16u2 and an ATmega328. The important thing to me was that HoodLoader2 enabled the user to program the 16u2, which enabled the use of any Arduino as an HID device (like a keyboard). I didn’t really want to do this, since it was Arduino.&lt;/p&gt;

&lt;p&gt;So, I had another option: I remembered that I got a neat board from one of my friends called the FRDM-K64F. This board is a low-cost, open source microcontroller platform that (apparently) is used in the automotive industry. The reason I went after this board was that I found a HID library for it and was like, “Well, I don’t have a Leonardo (which is the coward’s way out) or a Teensy so I’ll try using this.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boy, was that a fucking mistake.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This K64F was a total blunder, and to this day I haven’t actually gotten it to work. Granted, I did learn a lot, but no actual results. TLDR is I’m convinced that I’ve got the wrong firmware, but here’s the full story:&lt;/p&gt;

&lt;p&gt;So the K64F is a board previously used in CMPE-460, Interface and Digital Electronics, which covers various topics related to sensors, motors, and signals that now uses the NXP Kinetis. At some point, a CSH alum got her hands on one of these boards, gave it away to another CSH’er, who gave it to me. Having not worked with this platform before, I immediately started googling everything, and stumbled upon mbed’s site. Mbed is a platform that allows easy programming and use of a &lt;em&gt;ton&lt;/em&gt; of different microcontrollers. It’s possible to program the FRDM-K64F in a few different ways, but the way I wanted to do it was mbed.&lt;/p&gt;</content><author><name></name></author><summary type="html">So, if you’ve read my aboutme page recently, you’ll know that I’m currently working on putting together a cool custom controller for a GDD project for Imagine RIT 2020. Basically, the controller is going to be totally custom and will have many buttons, knobs, switches, dials, and displays so that people can walk by our booth and press fancy buttons to make random stuff happen in our game. (It’s more of a control panel, really). Basically, the panel will have the ability to impact the game world by activating abilities, changing stuff like gravity, screen orientation, etc. I want to make this happen by basically engineering a custom chassis, stuffing a bunch of really neat-o looking buttons inside, and having some kind of controller emulate keypresses</summary></entry><entry><title type="html">A neat HiDPI scaling hack</title><link href="http://localhost:4000/poweruser/guide/2019/07/12/arch_scaling_hack.html" rel="alternate" type="text/html" title="A neat HiDPI scaling hack" /><published>2019-07-12T12:33:00-04:00</published><updated>2019-07-12T12:33:00-04:00</updated><id>http://localhost:4000/poweruser/guide/2019/07/12/arch_scaling_hack</id><content type="html" xml:base="http://localhost:4000/poweruser/guide/2019/07/12/arch_scaling_hack.html">&lt;p&gt;Here’s a cool way to fix scaling and bad theme settings on GTK applications like libreoffice. I figured this out on my XPS 9560 and now I can use it again :P. Not sure if this can be done for every program, but for GTK stuff it can, I guess. (BTW I’m running i3)&lt;/p&gt;

&lt;p&gt;Just shove this snippet into your .desktop file after the &lt;code class=&quot;highlighter-rouge&quot;&gt;Exec=&lt;/code&gt; (probably located somewhere around /usr/share/applications/), depending on how you installed it. This’ll change to a light theme (since they actually work) and increase your scaling. Scaling level 2 is a little big, but on a 4K display, I say too big is better than too small.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;env GTK_THEME=&amp;lt;any light theme in your .themes directory&amp;gt; GDK_SCALE=2&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s a cool way to fix scaling and bad theme settings on GTK applications like libreoffice. I figured this out on my XPS 9560 and now I can use it again :P. Not sure if this can be done for every program, but for GTK stuff it can, I guess. (BTW I’m running i3)</summary></entry><entry><title type="html">Installing GRUB on Arch</title><link href="http://localhost:4000/poweruser/guide/2019/03/13/grub_arch_fix.html" rel="alternate" type="text/html" title="Installing GRUB on Arch" /><published>2019-03-13T19:32:23-04:00</published><updated>2019-03-13T19:32:23-04:00</updated><id>http://localhost:4000/poweruser/guide/2019/03/13/grub_arch_fix</id><content type="html" xml:base="http://localhost:4000/poweruser/guide/2019/03/13/grub_arch_fix.html">&lt;p&gt;Ok so I’m making this post out of annoyance. I might even edit the wiki to include this because this was really weird with an NVMe drive. Or maybe I’m just a simpleton.&lt;/p&gt;

&lt;p&gt;When you install Arch Linux, you should mount your EFI partition (in my case /dev/sda2) to /mnt/boot/efi.&lt;/p&gt;

&lt;p&gt;The steps go (and for reference my root partition is /dev/sda6)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount /dev/sda7 /mnt
mount /dev/sda2 /mnt/boot/
arch-chroot /mnt
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Arch
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and then it should work.&lt;/p&gt;</content><author><name></name></author><summary type="html">Ok so I’m making this post out of annoyance. I might even edit the wiki to include this because this was really weird with an NVMe drive. Or maybe I’m just a simpleton.</summary></entry><entry><title type="html">Intro to GNU/Linux (But mostly RHEL for RIT CE students) Mk II.</title><link href="http://localhost:4000/jekyll/update/2019/02/02/seminar_mk_ii.html" rel="alternate" type="text/html" title="Intro to GNU/Linux (But mostly RHEL for RIT CE students) Mk II." /><published>2019-02-02T15:32:23-05:00</published><updated>2019-02-02T15:32:23-05:00</updated><id>http://localhost:4000/jekyll/update/2019/02/02/seminar_mk_ii</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/02/02/seminar_mk_ii.html">&lt;p&gt;This seminar will be a light introduction to GNU/Linux for those who are brand new or at least know their way around.&lt;/p&gt;

&lt;p&gt;Link to slides &lt;a href=&quot;https://docs.google.com/presentation/d/14ia1Dp34B1xmx9fCBu5X7Xu4dv563XABAFjvPaCinRs/edit?usp=sharing&quot;&gt;here&lt;/a&gt;. (Only available to those with an RIT email address for now).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It covers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What GNU/Linux is&lt;/li&gt;
  &lt;li&gt;A brief history of its development&lt;/li&gt;
  &lt;li&gt;Linux Jargon (scattered throughout)&lt;/li&gt;
  &lt;li&gt;The basics of the GNOME desktop environment
    &lt;ul&gt;
      &lt;li&gt;How to log in&lt;/li&gt;
      &lt;li&gt;How to navigate the desktop&lt;/li&gt;
      &lt;li&gt;How to use Nautilus (GNOME’s file manager)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Command Line
    &lt;ul&gt;
      &lt;li&gt;Common Commands
        &lt;ul&gt;
          &lt;li&gt;Navigation (ls, la, cd)&lt;/li&gt;
          &lt;li&gt;Viewing (cat, grep)&lt;/li&gt;
          &lt;li&gt;Moving stuff (mv, cp)&lt;/li&gt;
          &lt;li&gt;Making Directories (mkdir)&lt;/li&gt;
          &lt;li&gt;Doing stuff as root (sudo)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Installing and Updating Packages
    &lt;ul&gt;
      &lt;li&gt;yum&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Running Programs&lt;/li&gt;
  &lt;li&gt;./&lt;/li&gt;
  &lt;li&gt;sh&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bash&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Text Editing&lt;/li&gt;
  &lt;li&gt;nano&lt;/li&gt;
  &lt;li&gt;vim&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emacs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Environment Variables&lt;/li&gt;
  &lt;li&gt;Modules&lt;/li&gt;
  &lt;li&gt;Programming Commands&lt;/li&gt;
  &lt;li&gt;python&lt;/li&gt;
  &lt;li&gt;javac&lt;/li&gt;
  &lt;li&gt;java&lt;/li&gt;
  &lt;li&gt;mcs&lt;/li&gt;
  &lt;li&gt;mono&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gcc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Basic Troubleshooting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-gnu-linux-&quot;&gt;What is GNU/Linux?&lt;/h2&gt;

&lt;p&gt;Linux is FOSS, meaning that it is free to use and install and the source code is available in its entirety online for free.&lt;/p&gt;

&lt;p&gt;Linux is what most of the cloud runs on. An overwhelming majority of servers run Linux that support e-mail, message boards, FTP, social media, and everything in-between. There is a very, very low chance that Linux has not affected your life in some way.&lt;/p&gt;

&lt;p&gt;A few of the main features that GNU/Linux boasts is that it’s highly configurable, usually pretty lightweight, and extremely secure. GNU/Linux doesn’t collect your data or force updates. You own the software that is on your computer, and can do whatever you want with it. (Gonna go ahead and steal this quote), “[A] Linux based OS allow[s] you to work the way you want [to] instead of making you work the way [it] want[s you to].”&lt;/p&gt;

&lt;p&gt;Linux is worked on by a huge community that spans a multitude of corporations and communities. A lot of different people work on a lot of different things for Linux. An OS is big: It’s gotta have drivers, a GUI, file managers, command line interfaces, and a whole buncha programs to do computer-y things. We got AAA corporate software engineers and random college students in their dorm rooms contributing to the same desktop environment repo.&lt;/p&gt;

&lt;p&gt;(Based on (and incorporates with) UNIX, GNU, and other systems)
Lastly, I think some people might get mad if I don’t mention this, Linux is a part of a bigger ecosystem of software. Linux is a kernel upon which an OS is built, so most complete distros use GNU project code and a few other things that sum up to a complete user experience.&lt;/p&gt;
&lt;h2 id=&quot;a-brief-history&quot;&gt;A Brief History&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Minics &amp;gt; Unics &amp;gt; Unix &amp;gt; Minix &amp;gt; Linux.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unix was designed after the development of a different system called Minics which was super overengineered and basically unusable.
Important aspects of Minics:
Clarity: Modular design, simple file structure, and straightforward system calls.
Portability: Written in C, UNIX is aimed for wide-scale use and adoption.
“A basis in C means Unix is adaptable and easy to run on a variety of hardware.”
Simultaneity: Sustains multiple users and workflows. Kernel and user stay separate.&lt;/p&gt;

&lt;p&gt;GNU began development when Richard Stallman decided that he wanted to use computers in an environment where he could freely share software with his peers without the burden of licensing and what not. He left his research position at MIT to pursue this project instead, as remaining at MIT would mean not being able to distribute it freely.&lt;/p&gt;

&lt;p&gt;Linus Torvalds began developing Linux in 1991 after being fed up with MINIX’s licensing. Torvalds announced on a MINIX  user group that he was developing his own OS, and a few years after starting development on MINIX using the GNU C compiler, version 1.0 dropped in 1994. (I highly encourage you to read up on the history and look at the source of the earlier versions if you have any interest at all.&lt;/p&gt;
&lt;h2 id=&quot;distros&quot;&gt;Distros&lt;/h2&gt;

&lt;p&gt;Here’s a &lt;em&gt;very&lt;/em&gt; brief, &lt;em&gt;very&lt;/em&gt; basic timeline of major linux distros. TLDR: Linux 1.0 came out in the early 90’s and so all of the biggest distros came out around then.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RedHat (1993)
    &lt;ul&gt;
      &lt;li&gt;Fedora (2003)&lt;/li&gt;
      &lt;li&gt;RHEL (2000)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Debian (1993)
    &lt;ul&gt;
      &lt;li&gt;Ubuntu (2004)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Slackware (1993)&lt;/li&gt;
  &lt;li&gt;Arch (2002)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The Basics&lt;/h2&gt;

&lt;p&gt;So first, before I go into any great detail about any one DE or Distro (we’ll only cover GNOME in this seminar) I thought it would be good to take a peek at other tools and DEs as well just to get you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perks of GNOME&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Popular DE&lt;/li&gt;
  &lt;li&gt;Sleek and Modern&lt;/li&gt;
  &lt;li&gt;Beginner Friendly&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;uses a lot of ram&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Tons of easy-to-use plugins and modifications&lt;/li&gt;
  &lt;li&gt;Metric tons of support&lt;/li&gt;
  &lt;li&gt;Everyone uses it&lt;/li&gt;
  &lt;li&gt;RIT uses it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-gnome-desktop&quot;&gt;The GNOME desktop&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Default GNOME desktop&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/RHEL_gnome_desktop.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what the GNOME desktop looks like as configured by RIT’s CE department. It’s got a top bar with a few different things. On the right, you’ve got a power and status menu which lets you change things like volume, open settings menu, and log out. It’s also got a clock and some status icons. On the left, you’ve got the Applications menu, (which we’ll cover in the next &lt;del&gt;slide&lt;/del&gt; section), which is probably your best bet for launching applications. On the bottom is a window list as well as a virtual desktop list that shows everything that is currently open.&lt;/p&gt;

&lt;h3 id=&quot;the-applications-menu&quot;&gt;The Applications Menu&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;Applications Menu&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/RHEL_gnome_activities.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the Applications menu (AKA the Activities Menu). In the center is an overview of all open windows. On the left, you have a dock that displays pinned programs for quick access (just like macOS) as well as any other open programs. When an icon is clicked, the Applications menu will close and the windows for that open program will be brought to the front. On the right, there is a list of all virtual desktops (These can be switched between with 
&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+ALT+&amp;lt;Arrow Key&amp;gt;&lt;/code&gt;). Up top, there is a search bar for finding programs, files, and directories. Above that is the usual top bar.&lt;/p&gt;

&lt;h3 id=&quot;file-management&quot;&gt;File Management&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;File Manager&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/file_mgr.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here is what Nautilus usually looks like by default on RHEL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You’ve got:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An area to view the files that are actually in your current directory
    &lt;ul&gt;
      &lt;li&gt;Quick access bar over on the left that can show directories, mounted volumes, network locations, etc.&lt;/li&gt;
      &lt;li&gt;In the top bar, from left to right, you have forward and back, an indicator that tells you your current path, and, if you hit CTRL+L, shows an address bar so you can enter a path yourself.&lt;/li&gt;
      &lt;li&gt;A search function, then a toggle for list view or icon view&lt;/li&gt;
      &lt;li&gt;A menu which houses options like zoom and how to sort your stuff.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;graphical-text-editors&quot;&gt;Graphical Text Editors&lt;/h2&gt;

&lt;p&gt;Linux has many graphical text editors available. They’re not much different from text editors on Windows, especially because most of the popular ones are the same. Atom, VS Code, and Sublime are all available on Linux. Even IDEs like the JetBrains collection are available for download and the install process is quite painless.&lt;/p&gt;

&lt;p&gt;There are, of course, Linux exclusive ones, such as Gedit, Leafpad, and Mousepad. They’re kind of like Notepad++.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;gedit&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/gedit.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-command-line&quot;&gt;The Command Line&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&quot;Command Line&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/term1.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The command line is the most powerful tool in Linux. You can do pretty anything you’d need to do in Linux on your terminal. It has tools for anything and everything from text editing to networking configuration to audio adjustment.&lt;/p&gt;

&lt;p&gt;The default shell RHEL uses is BASH, as does most every other distro. (There are others like CSH and ZSH but don’t worry about that right now).
    Most everything you would want to do on your computer (that doesn’t require graphics) can be done through the shell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Notes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is your friend&lt;/li&gt;
  &lt;li&gt;The lightest of weight&lt;/li&gt;
  &lt;li&gt;Fastest way to use your computer&lt;/li&gt;
  &lt;li&gt;Has great power&lt;/li&gt;
  &lt;li&gt;Requires great responsibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, here’s a list of commonly used commands.&lt;/p&gt;

&lt;h3 id=&quot;common-commands&quot;&gt;Common Commands&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;ls&lt;/em&gt; - Lists visible files in current directory&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;la&lt;/em&gt; - Lists all files in current directory (including hidden files)&lt;/li&gt;
  &lt;li&gt;cat - Outputs contents of text file&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;grep &amp;lt;phrase&amp;gt;&lt;/em&gt; - looks for phrase in command output or file&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;cd &amp;lt;path&amp;gt;&lt;/em&gt; - Changes working directory to &amp;lt;path&amp;gt; (eg. /home/will/Documents)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mv &amp;lt;file&amp;gt; &amp;lt;destination&amp;gt;&lt;/em&gt; - Moves a file or directory to new path&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;cp &amp;lt;file&amp;gt; &amp;lt;destination&amp;gt;&lt;/em&gt; - Copies a file or directory to new path (For directories, use the -r option)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mkdir &amp;lt;dir name&amp;gt;&lt;/em&gt; - Creates a directory named &amp;lt;dir name&amp;gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;chmod&lt;/em&gt; - Changes permissions on files (Normally used for marking programs as runnable)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;chown&lt;/em&gt; - Allows you to change permissions for files (set which account owns a file)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;sudo&lt;/em&gt; - (SuperUser DO) Executes a command as root&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run most programs on the CLI, you’ll probably do one of these things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;./&amp;lt;file name&amp;gt;&lt;/em&gt; - Used to run the vast majority of executables. Requires marking a file as runnable.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;bash &amp;lt;file name&amp;gt;&lt;/em&gt; - Used to run shell scripts. Usually doesn’t need any kind of permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;important-ce-specific-stuff&quot;&gt;Important CE specific stuff&lt;/h2&gt;

&lt;p&gt;### Environment Variables&lt;/p&gt;

&lt;p&gt;Shell stores variables to determine behavior&lt;/p&gt;

&lt;p&gt;&lt;em&gt;printenv &amp;lt;variable&amp;gt;&lt;/em&gt; - Prints environment variables&lt;/p&gt;

&lt;p&gt;&lt;em&gt;env VAR1=”value” &amp;lt;command&amp;gt; &amp;lt;command_options&amp;gt;&lt;/em&gt; - modifies environment variables
      &lt;em&gt;set&lt;/em&gt; - Change the value of shell attributes and positional parameters
      &amp;lt;h4 id=&quot;modules&quot;&amp;gt;Modules&amp;lt;/h4&amp;gt;&lt;/p&gt;

&lt;p&gt;Allow dynamic modification of user environment via module files. They can load specific versions of programs and run them from the command line.&lt;/p&gt;

&lt;p&gt;module load  - Loads modulefile. Each modulefile contains information needed to configure the shell for an application.&lt;/p&gt;

&lt;p&gt;Used for MATLAB, vivado, tensorflow.&lt;/p&gt;

&lt;h3 id=&quot;packages-on-rhel&quot;&gt;Packages on RHEL&lt;/h3&gt;

&lt;p&gt;To install packages on RHEL, type &lt;code style=&quot;font-family: Menlo, Consolas, &amp;quot;DejaVu Sans Mono&amp;quot;, monospace;&quot;&gt;sudo yum install &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;yum install&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/term2.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To install packages on RHEL, type &lt;code style=&quot;font-family: Menlo, Consolas, &amp;quot;DejaVu Sans Mono&amp;quot;, monospace;&quot;&gt;sudo yum update&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;yum update&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/term3.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;text-editing&quot;&gt;Text Editing&lt;/h3&gt;

&lt;p&gt;There are several ways to edit text in Linux. Arguably the fastest and lightest weight method is to use a Terminal. The big three are:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;nano&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/term4.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nano - simple, easy to use CLI-based text editor that comes with most distros&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Really good CLI editor for beginners. It’s only got one mode, and straightforward customization and hotkeys.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;vim&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/term5.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;vim - A lightweight, customizable, modal text editor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the more advanced users, Vim is extremely powerful and robust, but has a steep learning curve. There are tons of addons and tweaks available, and most everyone is posting their config files on their GitHub.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;emacs&quot; src=&quot;https://raw.githubusercontent.com/WillNilges/willnilges.github.io/master/posts/linux_seminar_files/emacs.png&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Emacs - Buffer based, shortcut heavy text editor for any and all applications.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Emacs is probably the most complex text editor of the ones here. It’s got everything: Text editors, compilers, terminal emulators (so does vim but don’t worry about it), an email client, and many, many games! It’s written in some kind of cursed Lisp and C mix. It’s insane, and if you want to learn it, prepare your spirits.
          &amp;lt;h3 id=&quot;code-compilation-and-execution&quot;&amp;gt;Code Compilation and Execution&amp;lt;/h3&amp;gt;&lt;/p&gt;

&lt;p&gt;You can easily run every language from the terminal.&lt;/p&gt;

&lt;p&gt;Like I said, there was:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - _./&amp;amp;lt;file name&amp;amp;gt;_ - Used to run the vast majority of executables. Requires marking a file as runnable.
  - _bash &amp;amp;lt;file name&amp;amp;gt;_ - Used to run shell scripts. Usually doesn't need any kind of permissions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But then there’s also tools for every language. Here are a few commonly used ones:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - &amp;lt;code&amp;gt;python&amp;lt;/code&amp;gt; - Tool to launch the Python interpreter and shell
  - &amp;lt;code&amp;gt;javac&amp;lt;/code&amp;gt; - Reads Java class and interface definitions and compiles them into bytecode and class files
  - &amp;lt;code&amp;gt;java&amp;lt;/code&amp;gt; - Tool to launch Java applications
  - &amp;lt;code&amp;gt;mcs&amp;lt;/code&amp;gt; - mono C# compiler
  - &amp;lt;code&amp;gt;mono&amp;lt;/code&amp;gt; - C# runtime environment
  - &amp;lt;code&amp;gt;gcc&amp;lt;/code&amp;gt; - C compiler
  - &amp;lt;code&amp;gt;g++&amp;lt;/code&amp;gt; - C and C++ compiler
  - &amp;lt;code&amp;gt;clang&amp;lt;/code&amp;gt; - C, C++, and Objective-C compiler
      
      &amp;lt;h2 id=&quot;conclusion&quot;&amp;gt;Conclusion&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aaaaand that’s about it. If you have any questions, comments, or suggestions, open an issue or pull request. I will probably be updating this from time to time, so check back for more content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.linux.com/what-is-linux&lt;/li&gt;
  &lt;li&gt;https://www.digitalocean.com/community/tutorials/brief-history-of-linux”&amp;gt;https://www.digitalocean.com/community/tutorials/brief-history-of-linux&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=UjDQtNYxtbU”&amp;gt;https://www.youtube.com/watch?v=UjDQtNYxtbU&lt;/li&gt;
  &lt;li&gt;https://www.gnu.org/software/emacs/tour/index.html”&amp;gt;https://www.gnu.org/software/emacs/tour/index.html&lt;/li&gt;
  &lt;li&gt;https://wiki.archlinux.org/index.php/environment_variables”&amp;gt;https://wiki.archlinux.org/index.php/environment_variables&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">This seminar will be a light introduction to GNU/Linux for those who are brand new or at least know their way around.</summary></entry><entry><title type="html">Windows broke my time!</title><link href="http://localhost:4000/poweruser/guide/2018/12/24/windows_broke_time.html" rel="alternate" type="text/html" title="Windows broke my time!" /><published>2018-12-24T11:32:23-05:00</published><updated>2018-12-24T11:32:23-05:00</updated><id>http://localhost:4000/poweruser/guide/2018/12/24/windows_broke_time</id><content type="html" xml:base="http://localhost:4000/poweruser/guide/2018/12/24/windows_broke_time.html">&lt;p&gt;(Updated 4 February, 2019)&lt;/p&gt;

&lt;p&gt;I’ve had this issue several times in the past: After installing Arch to a machine and rebooting a few times, the time may inexplicably be wrong. When you run &amp;lt;p id=&quot;code&quot;&amp;gt;timedatectl&amp;lt;/p&amp;gt; you might get something like this back:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Local time: Mon 2018-12-24 10:21:41 EST # Something incorrect
Universal time: Mon 2018-12-24 14:21:41 ETC # Is probably in EST or whatever your timezone is.
RTC time: Mon 2018-12-24 19:21:41
Time zone: America/New_York (EST, -0500)
System clock synchronized: yes
NTP service: inactive
RTC in local TZ: no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important things you will notice is that Universal Time won’t be UTC and Local Time might be something weird.&lt;/p&gt;

&lt;p&gt;Anyway, the point is you fix it with this: &lt;code class=&quot;highlighter-rouge&quot;&gt;timedatectl set-ntp true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and then in Windows, you have to create a file named WindowsTimeFixUTC.reg with the following contents and then double click on it to merge the contents with the registry:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation]
 &quot;RealTimeIsUniversal&quot;=dword:00000001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">(Updated 4 February, 2019)</summary></entry><entry><title type="html">Graphics output!</title><link href="http://localhost:4000/poweruser/guide/2018/12/17/graphics_output.html" rel="alternate" type="text/html" title="Graphics output!" /><published>2018-12-17T22:32:23-05:00</published><updated>2018-12-17T22:32:23-05:00</updated><id>http://localhost:4000/poweruser/guide/2018/12/17/graphics_output</id><content type="html" xml:base="http://localhost:4000/poweruser/guide/2018/12/17/graphics_output.html">&lt;p&gt;Did you know it’s possible to run Proprietary Nvidia drivers AND use Intel Integrated Graphics® to display the desktop?&lt;/p&gt;

&lt;p&gt;Yeah. You just have to install the Nvidia drivers on a desktop and then go into the BIOS, enable the integrated graphics, and then set it as default video output. Then, just plug your video cable directly into the motherboard.&lt;/p&gt;

&lt;p&gt;Do this, then you’ll have the whole GPU to throw at your OpenCL and Tensorflow stuff. Congrats.&lt;/p&gt;

&lt;p&gt;I had to do this at work last week, so I’m just gonna toss this up on here.&lt;/p&gt;</content><author><name></name></author><summary type="html">Did you know it’s possible to run Proprietary Nvidia drivers AND use Intel Integrated Graphics® to display the desktop?</summary></entry></feed>